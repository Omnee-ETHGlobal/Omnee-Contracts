Ran 1 test for test/foundry/OFTFactory.t.sol:UniversalFactoryTest
[FAIL. Reason: NotEnoughNative(421480 [4.214e5])] test_batch_send() (gas: 317933)
Traces:
  [317933] UniversalFactoryTest::test_batch_send()
    ├─ [175530] UniversalFactory::quoteDeployOFT("MEOW", "MEOW", [2, 3], 0x00030100110100000000000000000000000000030d40) [staticcall]
    │   ├─ [96183] EndpointV2Mock::quote(MessagingParams({ dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e149600000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000, options: 0x00030100110100000000000000000000000000030d40, payInLzToken: false }), UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25]) [staticcall]
    │   │   ├─ [81875] SendUln302Mock::quote(Packet({ nonce: 1, srcEid: 1, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, guid: 0x8b34aee2d14564064ac3f7621359c379a17bfa9c40f633fcd8556af7c6733aa1, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e149600000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000 }), 0x00030100110100000000000000000000000000030d40, false) [staticcall]
    │   │   │   ├─ [30202] DVNMock::getFee(2, 100, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 0x) [staticcall]
    │   │   │   │   ├─ [14561] DVNFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, confirmations: 100, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, quorum: 1, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ gas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10] }), 0x) [staticcall]
    │   │   │   │   │   ├─ [8510] PriceFeedMock::estimateFeeByEid(2, 452, 5000) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 5452, 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 5452
    │   │   │   │   └─ ← [Return] 5452
    │   │   │   ├─ [23435] ExecutorMock::getFee(2, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 288, 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   ├─ [7808] ExecutorFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, calldataSize: 288, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ lzReceiveBaseGas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10], nativeCap: 100000000000000000 [1e17], lzComposeBaseGas: 5000 }), 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(2, 288, 205000 [2.05e5]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 205288 [2.052e5], 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   ├─ [61183] EndpointV2Mock::quote(MessagingParams({ dstEid: 3, receiver: 0x0000000000000000000000008227724c33c1748a42d1c1cd06e21ab8deb6eb0a, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e149600000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000, options: 0x00030100110100000000000000000000000000030d40, payInLzToken: false }), UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25]) [staticcall]
    │   │   ├─ [49375] SendUln302Mock::quote(Packet({ nonce: 1, srcEid: 1, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, dstEid: 3, receiver: 0x0000000000000000000000008227724c33c1748a42d1c1cd06e21ab8deb6eb0a, guid: 0x43c5ded695fb9025153d40e80cb606e1f8f80d93fb7e4ce3359f6d9f22892978, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000010000000000000000000000007fa9385be102ac3eac297483dd6233d62b3e149600000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000 }), 0x00030100110100000000000000000000000000030d40, false) [staticcall]
    │   │   │   ├─ [13202] DVNMock::getFee(3, 100, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 0x) [staticcall]
    │   │   │   │   ├─ [8061] DVNFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 3, confirmations: 100, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, quorum: 1, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ gas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10] }), 0x) [staticcall]
    │   │   │   │   │   ├─ [4510] PriceFeedMock::estimateFeeByEid(3, 452, 5000) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 5452, 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 5452
    │   │   │   │   └─ ← [Return] 5452
    │   │   │   ├─ [14935] ExecutorMock::getFee(3, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 288, 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   ├─ [7808] ExecutorFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 3, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, calldataSize: 288, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ lzReceiveBaseGas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10], nativeCap: 100000000000000000 [1e17], lzComposeBaseGas: 5000 }), 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(3, 288, 205000 [2.05e5]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 205288 [2.052e5], 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   └─ ← [Return] 421480 [4.214e5]
    ├─ [0] VM::prank(ECRecover: [0x0000000000000000000000000000000000000001])
    │   └─ ← [Return] 
    ├─ [119390] UniversalFactory::deployOFT{value: 421480}("MEOW", "MEOW", [2, 3], 0x00030100110100000000000000000000000000030d40)
    │   ├─ [35183] EndpointV2Mock::quote(MessagingParams({ dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000, options: 0x00030100110100000000000000000000000000030d40, payInLzToken: false }), UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25]) [staticcall]
    │   │   ├─ [29375] SendUln302Mock::quote(Packet({ nonce: 1, srcEid: 1, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, guid: 0x8b34aee2d14564064ac3f7621359c379a17bfa9c40f633fcd8556af7c6733aa1, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000 }), 0x00030100110100000000000000000000000000030d40, false) [staticcall]
    │   │   │   ├─ [9202] DVNMock::getFee(2, 100, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 0x) [staticcall]
    │   │   │   │   ├─ [6061] DVNFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, confirmations: 100, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, quorum: 1, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ gas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10] }), 0x) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(2, 452, 5000) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 5452, 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 5452
    │   │   │   │   └─ ← [Return] 5452
    │   │   │   ├─ [10935] ExecutorMock::getFee(2, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 288, 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   ├─ [7808] ExecutorFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, calldataSize: 288, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ lzReceiveBaseGas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10], nativeCap: 100000000000000000 [1e17], lzComposeBaseGas: 5000 }), 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(2, 288, 205000 [2.05e5]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 205288 [2.052e5], 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   ├─ [35183] EndpointV2Mock::quote(MessagingParams({ dstEid: 3, receiver: 0x0000000000000000000000008227724c33c1748a42d1c1cd06e21ab8deb6eb0a, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000, options: 0x00030100110100000000000000000000000000030d40, payInLzToken: false }), UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25]) [staticcall]
    │   │   ├─ [29375] SendUln302Mock::quote(Packet({ nonce: 1, srcEid: 1, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, dstEid: 3, receiver: 0x0000000000000000000000008227724c33c1748a42d1c1cd06e21ab8deb6eb0a, guid: 0x43c5ded695fb9025153d40e80cb606e1f8f80d93fb7e4ce3359f6d9f22892978, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000 }), 0x00030100110100000000000000000000000000030d40, false) [staticcall]
    │   │   │   ├─ [9202] DVNMock::getFee(3, 100, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 0x) [staticcall]
    │   │   │   │   ├─ [6061] DVNFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 3, confirmations: 100, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, quorum: 1, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ gas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10] }), 0x) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(3, 452, 5000) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 5452, 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 5452
    │   │   │   │   └─ ← [Return] 5452
    │   │   │   ├─ [10935] ExecutorMock::getFee(3, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 288, 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   ├─ [7808] ExecutorFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 3, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, calldataSize: 288, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ lzReceiveBaseGas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10], nativeCap: 100000000000000000 [1e17], lzComposeBaseGas: 5000 }), 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(3, 288, 205000 [2.05e5]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 205288 [2.052e5], 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   ├─ [35183] EndpointV2Mock::quote(MessagingParams({ dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000, options: 0x00030100110100000000000000000000000000030d40, payInLzToken: false }), UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25]) [staticcall]
    │   │   ├─ [29375] SendUln302Mock::quote(Packet({ nonce: 1, srcEid: 1, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, dstEid: 2, receiver: 0x00000000000000000000000094771550282853f6e0124c302f7de1cf50aa45ca, guid: 0x8b34aee2d14564064ac3f7621359c379a17bfa9c40f633fcd8556af7c6733aa1, message: 0x00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000044d454f570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044d454f5700000000000000000000000000000000000000000000000000000000 }), 0x00030100110100000000000000000000000000030d40, false) [staticcall]
    │   │   │   ├─ [9202] DVNMock::getFee(2, 100, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 0x) [staticcall]
    │   │   │   │   ├─ [6061] DVNFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, confirmations: 100, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, quorum: 1, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ gas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10] }), 0x) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(2, 452, 5000) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 5452, 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 5452
    │   │   │   │   └─ ← [Return] 5452
    │   │   │   ├─ [10935] ExecutorMock::getFee(2, UniversalFactory: [0xe54a55121A47451c5727ADBAF9b9FC1643477e25], 288, 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   ├─ [7808] ExecutorFeeLibMock::getFee(FeeParams({ priceFeed: 0xa0Cb889707d426A7A386870A03bc70d1b0697598, dstEid: 2, sender: 0xe54a55121A47451c5727ADBAF9b9FC1643477e25, calldataSize: 288, defaultMultiplierBps: 12000 [1.2e4] }), DstConfig({ lzReceiveBaseGas: 5000, multiplierBps: 10000 [1e4], floorMarginUSD: 10000000000 [1e10], nativeCap: 100000000000000000 [1e17], lzComposeBaseGas: 5000 }), 0x0100110100000000000000000000000000030d40) [staticcall]
    │   │   │   │   │   ├─ [2510] PriceFeedMock::estimateFeeByEid(2, 288, 205000 [2.05e5]) [staticcall]
    │   │   │   │   │   │   └─ ← [Return] 205288 [2.052e5], 100000000000000000000 [1e20], 100000000000000000000 [1e20], 0
    │   │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   │   └─ ← [Return] 205288 [2.052e5]
    │   │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   │   └─ ← [Return] MessagingFee({ nativeFee: 210740 [2.107e5], lzTokenFee: 0 })
    │   └─ ← [Revert] NotEnoughNative(421480 [4.214e5])
    └─ ← [Revert] NotEnoughNative(421480 [4.214e5])

Suite result: FAILED. 0 passed; 1 failed; 0 skipped; finished in 36.09ms (6.24ms CPU time)

Ran 1 test suite in 350.32ms (36.09ms CPU time): 0 tests passed, 1 failed, 0 skipped (1 total tests)

Failing tests:
Encountered 1 failing test in test/foundry/OFTFactory.t.sol:UniversalFactoryTest
[FAIL. Reason: NotEnoughNative(421480 [4.214e5])] test_batch_send() (gas: 317933)